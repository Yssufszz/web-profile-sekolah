-- 1. Tabel Profil Sekolah
CREATE TABLE school_profile (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  vision TEXT,
  mission TEXT,
  address TEXT,
  phone VARCHAR(50),
  email VARCHAR(100),
  website VARCHAR(100),
  logo_url TEXT,
  header_image_url TEXT,
  established_year INTEGER,
  accreditation VARCHAR(10),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2. Tabel Kompetensi Keahlian
CREATE TABLE skills (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  image_url TEXT,
  duration_years INTEGER,
  career_prospects TEXT[],
  subjects TEXT[],
  facilities TEXT[],
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 3. Tabel PPDB (Penerimaan Peserta Didik Baru)
CREATE TABLE ppdb_periods (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  academic_year VARCHAR(20) NOT NULL,
  registration_start DATE NOT NULL,
  registration_end DATE NOT NULL,
  announcement_date DATE,
  max_students INTEGER,
  registration_fee DECIMAL(10,2),
  requirements TEXT[],
  documents_needed TEXT[],
  selection_process TEXT[],
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 4. Tabel Pendaftar PPDB
CREATE TABLE ppdb_registrations (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  period_id UUID REFERENCES ppdb_periods(id),
  registration_number VARCHAR(50) UNIQUE NOT NULL,
  student_name VARCHAR(255) NOT NULL,
  student_email VARCHAR(100),
  student_phone VARCHAR(50),
  parent_name VARCHAR(255),
  parent_phone VARCHAR(50),
  parent_email VARCHAR(100),
  birth_date DATE,
  birth_place VARCHAR(100),
  gender VARCHAR(10),
  address TEXT,
  previous_school VARCHAR(255),
  chosen_skill_id UUID REFERENCES skills(id),
  documents JSONB, -- {ktp_url, kk_url, ijazah_url, foto_url, etc}
  status VARCHAR(20) DEFAULT 'pending', -- pending, accepted, rejected
  notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 5. Tabel Berita/Pengumuman
CREATE TABLE news (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  slug VARCHAR(255) UNIQUE NOT NULL,
  content TEXT,
  excerpt TEXT,
  featured_image_url TEXT,
  category VARCHAR(50), -- news, announcement, event
  is_published BOOLEAN DEFAULT false,
  is_featured BOOLEAN DEFAULT false,
  author_id UUID,
  published_at TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 6. Tabel Galeri
CREATE TABLE gallery (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  media_url TEXT NOT NULL,
  media_type VARCHAR(10) NOT NULL, -- image, video
  thumbnail_url TEXT,
  category VARCHAR(50), -- facility, activity, achievement, event
  is_featured BOOLEAN DEFAULT false,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 7. Tabel Kontak/Informasi
CREATE TABLE contacts (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  type VARCHAR(50) NOT NULL, -- phone, email, social, location
  label VARCHAR(100) NOT NULL,
  value TEXT NOT NULL,
  icon VARCHAR(50),
  is_primary BOOLEAN DEFAULT false,
  order_index INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
)

-- 8. Tabel Admin Users
CREATE TABLE admin_users (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  email VARCHAR(255) UNIQUE NOT NULL,
  full_name VARCHAR(255) NOT NULL,
  role VARCHAR(50) DEFAULT 'admin', -- super_admin, admin, editor
  avatar_url TEXT,
  is_active BOOLEAN DEFAULT true,
  last_login TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 9. Enable RLS (Row Level Security)
ALTER TABLE school_profile ENABLE ROW LEVEL SECURITY;
ALTER TABLE skills ENABLE ROW LEVEL SECURITY;
ALTER TABLE ppdb_periods ENABLE ROW LEVEL SECURITY;
ALTER TABLE ppdb_registrations ENABLE ROW LEVEL SECURITY;
ALTER TABLE news ENABLE ROW LEVEL SECURITY;
ALTER TABLE gallery ENABLE ROW LEVEL SECURITY;
ALTER TABLE contacts ENABLE ROW LEVEL SECURITY;
ALTER TABLE admin_users ENABLE ROW LEVEL SECURITY;

-- 10. RLS Policies (Public read, Admin write)
-- School Profile - Public read
CREATE POLICY "Allow public read school_profile" ON school_profile
  FOR SELECT USING (true);

CREATE POLICY "Allow admin full access school_profile" ON school_profile
  FOR ALL USING (auth.role() = 'authenticated');

-- Skills - Public read active skills
CREATE POLICY "Allow public read active skills" ON skills
  FOR SELECT USING (is_active = true);

CREATE POLICY "Allow admin full access skills" ON skills
  FOR ALL USING (auth.role() = 'authenticated');

-- PPDB Periods - Public read active periods
CREATE POLICY "Allow public read active ppdb_periods" ON ppdb_periods
  FOR SELECT USING (is_active = true);

CREATE POLICY "Allow admin full access ppdb_periods" ON ppdb_periods
  FOR ALL USING (auth.role() = 'authenticated');

-- PPDB Registrations - Public insert, Admin manage
CREATE POLICY "Allow public insert ppdb_registrations" ON ppdb_registrations
  FOR INSERT WITH CHECK (true);

CREATE POLICY "Allow admin full access ppdb_registrations" ON ppdb_registrations
  FOR ALL USING (auth.role() = 'authenticated');

-- News - Public read published
CREATE POLICY "Allow public read published news" ON news
  FOR SELECT USING (is_published = true);

CREATE POLICY "Allow admin full access news" ON news
  FOR ALL USING (auth.role() = 'authenticated');

-- Gallery - Public read
CREATE POLICY "Allow public read gallery" ON gallery
  FOR SELECT USING (true);

CREATE POLICY "Allow admin full access gallery" ON gallery
  FOR ALL USING (auth.role() = 'authenticated');

-- Contacts - Public read
CREATE POLICY "Allow public read contacts" ON contacts
  FOR SELECT USING (true);

CREATE POLICY "Allow admin full access contacts" ON contacts
  FOR ALL USING (auth.role() = 'authenticated');

-- Admin Users - Admin only
CREATE POLICY "Allow admin read admin_users" ON admin_users
  FOR SELECT USING (auth.role() = 'authenticated');

  -- Insert admin user data
INSERT INTO admin_users (
  email, 
  password_hash, 
  full_name, 
  role, 
  is_active
) VALUES (
  'ysuf2303@gmail.com',
  'Onlyone_23',
  'Yusuf Admin',
  'admin',
  true
);
